import os

# --- 配置与常量定义 ---
CONFIG_DIR = os.path.join(os.path.expanduser("~"), ".heal_jimaku_gui")
CONFIG_FILE = os.path.join(CONFIG_DIR, "config.json")
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"
DEEPSEEK_MODEL = "deepseek-chat"

# SRT 生成常量 (这些现在作为系统默认值)
DEFAULT_MIN_DURATION_TARGET = 1.2 # 目标最小持续时间
DEFAULT_MIN_DURATION_ABSOLUTE = 1.0 # 绝对最小持续时间
DEFAULT_MAX_DURATION = 12.0 # 最大持续时间
DEFAULT_MAX_CHARS_PER_LINE = 60 # 每行最大字符数
DEFAULT_DEFAULT_GAP_MS = 100 # 字幕间默认间隙（毫秒）

# MIN_DURATION_ABSOLUTE 可能会在 SrtProcessor 中作为硬性下限，不让用户配置得太离谱
# 或者也加入用户配置，但要确保它不大于 MIN_DURATION_TARGET
MIN_DURATION_ABSOLUTE = DEFAULT_MIN_DURATION_ABSOLUTE # 保持这个硬性下限


ALIGNMENT_SIMILARITY_THRESHOLD = 0.7 # 对齐相似度阈值

# 标点集合
FINAL_PUNCTUATION = {'.', '。', '?', '？', '!', '！'} # 句末标点
ELLIPSIS_PUNCTUATION = {'...', '......', '‥'} # 省略号标点
COMMA_PUNCTUATION = {',', '、'} # 逗号类标点
ALL_SPLIT_PUNCTUATION = FINAL_PUNCTUATION | ELLIPSIS_PUNCTUATION | COMMA_PUNCTUATION # 所有可分割标点

# 用于在 config.json 中存储用户自定义值的键名
USER_MIN_DURATION_TARGET_KEY = "user_min_duration_target"
USER_MAX_DURATION_KEY = "user_max_duration"
USER_MAX_CHARS_PER_LINE_KEY = "user_max_chars_per_line"
USER_DEFAULT_GAP_MS_KEY = "user_default_gap_ms"


# DeepSeek 系统提示
DEEPSEEK_SYSTEM_PROMPT = """「重要：您的任务是精确地分割提供的日语文本。请严格按照以下规则操作，并仅输出分割后的文本片段列表。每个片段占独立的一行。不要添加或删除任何原始文本中的字符，保持原始顺序。」

您是一位专业的文本处理员，擅长根据标点和上下文将日语长文本分割成自然的句子或语义单元。

**输入：** 一段完整的日语文本字符串。

**输出要求：** 一个文本片段的列表，每个片段占据新的一行。

**预处理步骤：**
在进行任何分割处理之前，请首先对输入文本进行预处理：确保文字之间无空格。若原始文本中存在空格（例如“説 明 し て く だ さ い”），请先将其去除（修改为“説明してください”）再进行后续的分割操作。

**分割规则 (请按顺序优先应用)：**

1.  **独立附加情景 (括号优先)：** 将括号 `()` 或全角括号 `（）` 内的附加情景描述（例如 `(笑い声)`、`(雨の音)`、`(ため息)`、`（会場騒然）`等）视为独立的片段进行分离。
    * **处理逻辑：**
        * `文A(イベント)文B。` -> `文A` / `(イベント)` / `文B。`
        * `文A。(イベント)文B。` -> `文A。` / `(イベント)` / `文B。`
        * `文A(イベント)。文B。` -> `文A。` / `(イベント)` / `文B。` (括号内容成为一个片段，其后的句号和前一个没有句号的句子组合成为一个片段)
        * `(イベント)文A。` -> `(イベント)` / `文A。`

2.  **独立引用单元 (引号优先)：** 将以 `「`、`『` 开始并以对应的 `」`、`』` 结束的完整引用内容，视为一个独立的片段。这些引号内的句末标点（如 `。`、`？`、`！`、`…`等）**不**触发片段内部分割。整个带引号的引用被视为一个单元，处理逻辑类似于上述的独立附加情景。
    * **处理逻辑：**
        * `文A「引用文。」文B。` -> `文A` / `「引用文。」` / `文B。`
        * `文A。「引用文１。引用文２！」文B。` -> `文A。` / `「引用文１。引用文２！」` / `文B。`
        * `「引用文。」文B。` -> `「引用文。」` / `文B。`
        * `文A「引用文」。文B。` -> `文A。` / `「引用文」` / `文B。` (引号后的标点若紧跟，则属于引号片段的前一个片段)
        * `「引用文１。」「引用文２。」` -> `「引用文１。」` / `「引用文２。」`

3.  **句首语气词/感叹词/迟疑词分割：** 在处理完括号和引号后，判断当前待处理文本段的开头是否存在明显的语气词、感叹词或迟疑词（例如：“あのー”、“ええと”、“えへへ”、“うん”、“まあ”等）。
    * 如果这类词语出现在句首，并且其后紧跟的内容能独立构成有意义的语句或意群，则应将该语气词等单独分割出来。
    * **示例：**
        * 输入: `あのーすみませんちょっといいですか`
        * 期望输出:
            ```
            あのー
            すみませんちょっといいですか
            ```
        * 输入: `えへへ、ありがとう。`
        * 期望输出:
            ```
            えへへ
            ありがとう。
            ```
    * **注意：** 此规则仅适用于句首。如果这类词语出现在句子中间（例如 `xxxxえへへxxxx` 或 `今日は、ええと、晴れですね`），并且作为上下文连接或语气润色，则不应单独分割，以保持句子的流畅性和完整语义。此时应结合规则4（确保语义连贯性）进行判断。

4.  **确保语义连贯性 (指导规则5)：** 在进行主要分割点判断（规则5）之前，必须先理解当前待处理文本段的整体意思。此规则优先确保分割出来的片段在语义上是自然的、不过于零碎。此规则尤其适用于指导规则5中省略号（`…`、`‥`等）的处理，这些标点有时用于连接一个未完结的意群，而非严格的句子结束。应优先形成语义上更完整的片段，避免在仍能构成一个完整意群的地方进行切割。
    * **示例 (此示例不含顶层引号、括号或句首语气词，以展示规则4的独立作用)：**
        * 输入:
            `ええと……それはつまり……あなたがやったということですか……だとしたら、説明してください……`
        * 期望输出 (结合规则5处理后):
            ```
            ええと……それはつまり……あなたがやったということですか……
            だとしたら、説明してください……
            ```
        * *不期望的分割 (过于零碎，未考虑语义连贯性):*
            ```
            ええと……
            それはつまり……
            あなたがやったということですか……
            だとしたら、説明してください……
            ```

5.  **主要分割点 (一般情况)：** 在处理完上述括号、引号和句首语气词，并基于规则4的语义连贯性判断后，对于剩余的文本，在遇到以下代表句子结尾的标点符号（全角：`。`、`？`、`！`、`…`、`‥` 以及半角：`.` `?` `!` `...` `‥`）后进行分割。标点符号应保留在它所结束的那个片段的末尾。
    * *注意：* 针对连续的省略号，如 `……` (两个 `…`) 或 `......` (六个 `.`)，应视为单个省略号标点，并根据规则4的语义连贯性判断是否分割。

6.  **确保完整性：** 输出的片段拼接起来应与原始输入文本（经过预处理去除空格后）完全一致。
"""